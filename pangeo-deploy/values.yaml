daskhub:
  # Pangeo configuration values
  # --------------------
  # The following configuration options are specifically for the custom Pangeo components.
  # Some values will be inherited into the dependent chart configs. See requirements.yaml for info.

  # Create and use roles and service accounts on an RBAC enabled cluster.
  rbac:
    enabled: true

  # Dependency configuration values
  # -------------------------------
  # To configure dependencies you must create a key with the name of the dependency
  # and then configure as per the dependent chart's values.yaml. Don't forget to indent!

  jupyterhub:
    # Helm config for jupyterhub goes here
    # See https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
    singleuser:
      cpu:
        limit: 2
        guarantee: 1
      memory:
        limit: 4G
        guarantee: 2G

      extraEnv:
        # The default worker image matches the singleuser image.
        DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{JUPYTER_IMAGE_SPEC}'
        DASK_DISTRIBUTED__DASHBOARD_LINK: '/user/{JUPYTERHUB_USER}/proxy/{port}/status'
        DASK_LABEXTENSION__FACTORY__MODULE: 'dask_gateway'
        DASK_LABEXTENSION__FACTORY__CLASS: 'GatewayCluster'
      serviceAccountName: pangeo

    prePuller:
      hook:
        enabled: false

    scheduling:
      userScheduler:
        enabled: true
      podPriority:
        enabled: true
      userPlaceholder:
        enabled: false

    hub:
      service:
        annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/path: '/hub/metrics'
      extraConfig:
        prometheus: |
          c.JupyterHub.authenticate_prometheus = False

  dask-gateway:
    gateway:
      backend:
        scheduler:
          extraPodConfig:
            serviceAccountName: pangeo
            tolerations:
              - key: "k8s.dask.org/dedicated"
                operator: "Equal"
                value: "scheduler"
                effect: "NoSchedule"
              - key: "k8s.dask.org_dedicated"
                operator: "Equal"
                value: "scheduler"
                effect: "NoSchedule"
        worker:
          extraContainerConfig:
            securityContext:
              runAsGroup: 1000
              runAsUser: 1000
          extraPodConfig:
            serviceAccountName: pangeo
            automountServiceAccountToken: true
            securityContext:
              fsGroup: 1000
            tolerations:
              - key: "k8s.dask.org/dedicated"
                operator: "Equal"
                value: "worker"
                effect: "NoSchedule"
              - key: "k8s.dask.org_dedicated"
                operator: "Equal"
                value: "worker"
                effect: "NoSchedule"

        # TODO: figure out a replacement for userLimits.
      extraConfig:
        optionHandler: |
          from dask_gateway_server.options import Options, Integer, Float, String, Mapping
          def cluster_options(user):
              def option_handler(options):
                  if ":" not in options.image:
                      raise ValueError("When specifying an image you must also provide a tag")
                  extra_annotations = {
                      "hub.jupyter.org/username": user.name,
                      "prometheus.io/scrape": "true",
                      "prometheus.io/port": "8787",
                  }
                  extra_labels = {
                      "hub.jupyter.org/username": user.name,
                  }
                  return {
                      "worker_cores_limit": options.worker_cores,
                      "worker_cores": min(options.worker_cores / 2, 1),
                      "worker_memory": "%fG" % options.worker_memory,
                      "image": options.image,
                      "scheduler_extra_pod_annotations": extra_annotations,
                      "worker_extra_pod_annotations": extra_annotations,
                      "scheduler_extra_pod_labels": extra_labels,
                      "worker_extra_pod_labels": extra_labels,
                      "environment": options.environment,
                  }
              return Options(
                  Integer("worker_cores", 2, min=1, max=16, label="Worker Cores"),
                  Float("worker_memory", 4, min=1, max=32, label="Worker Memory (GiB)"),
                  String("image", default="pangeo/pangeo-notebook:latest", label="Image"),
                  Mapping("environment", {}, label="Environment Variables"),
                  handler=option_handler,
              )
          c.Backend.cluster_options = cluster_options
        idle: |
          # timeout after 30 minutes of inactivity
          c.KubeClusterConfig.idle_timeout = 1800
        limits: |
          # per Dask cluster limits.
          c.ClusterConfig.cluster_max_cores = 100
          c.ClusterConfig.cluster_max_memory = "600G"

homeDirectories:
  nfs:
    enabled: false
