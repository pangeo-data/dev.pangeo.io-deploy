pangeo:
  jupyterhub:
    proxy:
      https:
        hosts:
        - staging.hub.pangeo.io
        letsencrypt:
          contactEmail: jhamman@ucar.edu
      service:
        loadBalancerIP: 35.232.186.70
    hub:
      resources:
        requests:
          cpu: "0.1"
          memory: 0.25Gi
    scheduling:
      userScheduler:
        enabled: false

gateway:
  proxyToken: <SECRET>

  clusterManager:
    clusterStartTimeout: 600
    workerStartTimeout: 600
    worker:
      extraPodConfig:
        tolerations:
          - key: "k8s.dask.org_dedicated"
            operator: "Equal"
            value: "worker"
    scheduler:
      extraPodConfig:
        tolerations:
          - key: "k8s.dask.org_dedicated"
            operator: "Equal"
            value: "worker"
  extraConfig: |
    from dask_gateway_server.options import Options, Integer, Float, String
    def option_handler(options):
        if ":" not in options.image:
            raise ValueError("When specifying an image you must also provide a tag")
        return {
            "worker_cores_limit": options.worker_cores,
            "worker_cores": min(options.worker_cores / 2, 1),
            "worker_memory": "%fG" % options.worker_memory,
            "image": options.image,
        }
    c.DaskGateway.cluster_manager_options = Options(
        Integer("worker_cores", 2, min=1, max=4, label="Worker Cores"),
        Float("worker_memory", 4, min=1, max=8, label="Worker Memory (GiB)"),
        String("image", default="daskgateway/dask-gateway:0.5.0", label="Image"),
        handler=option_handler,
    )
  auth:
    type: jupyterhub
    jupyterhub:
      apiToken: <SECRET>
