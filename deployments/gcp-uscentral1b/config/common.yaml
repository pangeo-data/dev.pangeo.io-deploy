pangeo:
  jupyterhub:
    scheduling:
      corePods:
        nodeAffinity:
          matchNodePurpose: require
    singleuser:
      # XXX: Hubploy should handle the image stuff
      image:
        name: pangeo/pangeo-notebook
        tag: b261b3e

      initContainers:
        - name: volume-mount-hack
          image: busybox
          command: ["sh", "-c", "id && chown 1000:1000 /home/jovyan && ls -lhd /home/jovyan"]
          securityContext:
            runAsUser: 0
          volumeMounts:
          - name: home
            mountPath: /home/jovyan
            subPath: "uscentral1b/{username}"
      storage:
        type: static
        static:
          pvcName: home-nfs
          subPath: "uscentral1b/{username}"
      cloudMetadata:
        enabled: true
    hub:
      resources:
        requests:
          cpu: "0.25"
          memory: 0.5Gi
        limits:
          cpu: "1.25"
          memory: 1Gi
      service:
        annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/path: '/hub/metrics'
      extraConfig:
        administrators: |
          c.Authenticator.admin_users = ["TomAugspurger"]
        image_pulls: |
          c.KubeSpawner.start_timeout = 60 * 10  # 10-minute timeout for large image pulls
        profile_list: |
          c.KubeSpawner.profile_list = [
            {
                'display_name': 'Small (1 GB - 4 GB)',
                'default': 'True',
                'kubespawner_override': {
                    'cpu_limit': 2,
                    'cpu_guarantee': 0.3,
                    'mem_limit': '4G',
                    'mem_guarantee': '1G',
                }
            },
            {
                'display_name': 'Medium (4 GB - 8G GB)',
                'kubespawner_override': {
                    'cpu_limit': 2,
                    'cpu_guarantee': 1,
                    'mem_limit': '8G',
                    'mem_guarantee': '4G',
                }
            },
            {
                'display_name': 'Large (12 GB - 16 GB)',
                'kubespawner_override': {
                    'cpu_limit': 4,
                    'cpu_guarantee': 1,
                    'mem_limit': '16G',
                    'mem_guarantee': '12G',
                }
            },
          ]

        customPodHook: |
          c.JupyterHub.template_paths = ['/usr/local/share/jupyterhub/custom_templates/']
          c.JupyterHub.template_vars = {
            'pangeo_hub_title': 'us-central1-b.gcp.pangeo.io',
            'pangeo_hub_subtitle': 'a community hub for ocean, atmospheric, and climate research',
            'pangeo_welcome': """Welcome to us-central1-b.gcp.pangeo.io. This hub lives in Google Cloud region <code>us-central1-b</code>. It is maintained by the <a href="http://pangeo.io">Pangeo project</a> and supported by a grant from the National Science Foundation (NSF award 1740648), which includes a direct award of cloud credits from Google Cloud. The hub's configuration is stored in the github repository <a href="https://github.com/pangeo-data/pangeo-cloud-federation/">https://github.com/pangeo-data/pangeo-cloud-federation/</a>. To provide feedback and report any technical problems, please use the <a href="https://github.com/pangeo-data/pangeo-cloud-federation//issues">github issue tracker</a>.""",
          }

      extraVolumes:
        - name: custom-templates
          gitRepo:
            repository: "https://github.com/pangeo-data/pangeo-custom-jupyterhub-templates.git"
            revision: "39962614b3df4ca86efb29712f7e67c51308d25b"
      extraVolumeMounts:
        - mountPath: /usr/local/share/jupyterhub/custom_templates
          name: custom-templates
          subPath: "pangeo-custom-jupyterhub-templates/templates"
        - mountPath: /usr/local/share/jupyterhub/static/extra-assets
          name: custom-templates
          subPath: "pangeo-custom-jupyterhub-templates/extra-assets"
      extraEnv:
        OAUTH2_AUTHORIZE_URL: "https://pangeo.auth0.com/authorize"
        OAUTH2_TOKEN_URL: "https://pangeo.auth0.com/oauth/token"
        OAUTH_CALLBACK_URL: "https://staging.hub.pangeo.io/hub/oauth_callback"

    auth:
      type: custom
      custom:
        className: oauthenticator.generic.GenericOAuthenticator
        config:
          login_service: "Pangeo"
          token_url: https://pangeo.auth0.com/oauth/token
          userdata_url: https://pangeo.auth0.com/oauth/userinfo
          userdata_method: GET
          username_key: nickname
          scope:
            - openid
            - profile
            - email
      admin:
        access: true
        users:
          - jhamman
          - rabernat
          - TomAugspurger
          - scottyhq

  dask-gateway:
    gateway:
      extraConfig:
        optionHandler: |
          from dask_gateway_server.options import Options, Integer, Float, String
          def cluster_options(user):
             def option_handler(options):
                 if ":" not in options.image:
                     raise ValueError("When specifying an image you must also provide a tag")
                 extra_annotations = {
                     "hub.jupyter.org/username": user.name,
                     "prometheus.io/scrape": "true",
                     "prometheus.io/port": "8787",
                 }
                 extra_labels = {
                     "hub.jupyter.org/username": user.name,
                 }
                 return {
                     "worker_cores_limit": options.worker_cores,
                     "worker_cores": min(options.worker_cores / 2, 1),
                     "worker_memory": "%fG" % options.worker_memory,
                     "image": options.image,
                     "scheduler_extra_pod_annotations": extra_annotations,
                     "worker_extra_pod_annotations": extra_annotations,
                     "scheduler_extra_pod_labels": extra_labels,
                     "worker_extra_pod_labels": extra_labels,
                 }
             return Options(
                 Integer("worker_cores", 2, min=1, max=4, label="Worker Cores"),
                 Float("worker_memory", 4, min=1, max=8, label="Worker Memory (GiB)"),
                 String("image", default="pangeo/pangeo-notebook:latest", label="Image"),
                 handler=option_handler,
             )
          c.Backend.cluster_options = cluster_options

homeDirectories:
  nfs:
    enabled: true
    serverPath: "/homes"
    # Output from `gcloud filestore instances describe pangeo-uscentral1b --zone=us-central1-b`
    serverIP: 10.126.142.50
    serverName: home

grafana:
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus
          orgId: 1
          type: prometheus
          url: http://us-central1b-staging-prometheus-server
          access: proxy
          isDefault: true
